(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{356:function(t,a,e){"use strict";e.r(a);var s=e(42),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"interplanetary-linked-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#interplanetary-linked-data"}},[t._v("#")]),t._v(" Interplanetary Linked Data")]),t._v(" "),e("p",[t._v("Welcome to the internet of data structures!")]),t._v(" "),e("h2",{attrs:{id:"what-is-ipld"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-ipld"}},[t._v("#")]),t._v(" What is IPLD?")]),t._v(" "),e("p",[t._v("IPLD isn't a project or a library, it's an ecosystem. An\necosystem of formats and data structures for building\napplications that can be fully decentralized.")]),t._v(" "),e("p",[t._v("This ecosystem is held together by a few concepts and\nstandards that ensure compatibility between formats\nand programming languages.")]),t._v(" "),e("p",[t._v("You'll find numerous libraries for working with IPLD.\nYou may even create a few of your own. That library is\npart of the IPLD ecosystem and you're now a part of its\ncommunity. You don't need to be a committer in repository\nin the IPLD GitHub org to be a part of this community,\nyou're already almost there just by reading this far.")]),t._v(" "),e("h2",{attrs:{id:"table-of-contents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[t._v("#")]),t._v(" Table of Contents")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/overview/"}},[t._v("Overview")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/vision/"}},[t._v("Vision")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/getting-started/"}},[t._v("Getting Started")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/tutorials/"}},[t._v("Tutorials")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/getting-started/synthesis/"}},[t._v("Synthesizing Systems")])],1)])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/blocks/"}},[t._v("Blocks")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/codecs/"}},[t._v("Codecs")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/data-model/"}},[t._v("Data Model")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/pathing/"}},[t._v("Pathing")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/schemas/"}},[t._v("Schemas")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/advanced-layouts/"}},[t._v("Advanced Data Layouts")])],1),t._v(" "),e("li",[e("a",{attrs:{href:"/selectors"}},[t._v("Selectors")])]),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/ecosystem/"}},[t._v("Ecosystem")]),t._v(" "),e("ul",[e("li",[e("RouterLink",{attrs:{to:"/ecosystem/graphsync.html"}},[t._v("Graphsync")])],1)])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/details/"}},[t._v("Details")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/opens-research/"}},[t._v("Open Research")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/glossary.html"}},[t._v("Glossary")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/media/"}},[t._v("Media")])],1),t._v(" "),e("li",[e("RouterLink",{attrs:{to:"/FAQ.html"}},[t._v("FAQ")])],1)]),t._v(" "),e("h2",{attrs:{id:"from-data-to-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from-data-to-data-structures"}},[t._v("#")]),t._v(" From Data to Data Structures")]),t._v(" "),e("p",[t._v("Hashes are wonderful.")]),t._v(" "),e("p",[t._v("If you hash something you can give that hash to anyone else\nin the world, anywhere in the galaxy (IP stands for Interplanetary),\nthey can tell if they have that data and when they send\nit to you, you're able to verify it was the right data even\nwithout trusting that person.")]),t._v(" "),e("p",[t._v("If you think of hashes like URLs, you can pass them around and\nask people for them without fixing the place where that data exists\ninto the link the way you do with a URL. This is really powerful,\nbut by itself it's a bit limited.")]),t._v(" "),e("p",[t._v("For one thing, there are lots of hash algorithms, and they keep\ngetting better. A hash doesn't say "),e("em",[t._v("what")]),t._v(" sort of hash it is. We\nsolved that with something called "),e("a",{attrs:{href:""}},[e("code",[t._v("multihash")])]),t._v('\nwhich is just a hash that says "I\'m a hash of this particular\nalgorithm."')]),t._v(" "),e("p",[t._v('So now, with multihash, a single identifier can get us any set\nof binary data (what we all a "Block") from anywhere in the world.')]),t._v(" "),e("p",[t._v("That's "),e("em",[t._v("data")]),t._v(", we've got that covered, but now we need to go from\n"),e("em",[t._v("data")]),t._v(" to "),e("strong",[t._v("data structures")]),t._v(".")]),t._v(" "),e("p",[t._v("This means that we have to think about different formats (JSON, CBOR,\nBitcoin, Ethereum, etc) and we also need to think about different\nprogramming languages (JavaScript, Go, Rust, etc) because these\nlanguages have different basic types that are used to represent data\nstructures in-memory.")]),t._v(" "),e("p",[t._v("That's IPLD.")]),t._v(" "),e("p",[t._v("IPLD is how we go from "),e("em",[t._v("data")]),t._v(" to "),e("strong",[t._v("data structures")]),t._v(".")]),t._v(" "),e("p",[t._v("We do this with a new link type and a data model.")]),t._v(" "),e("p",[t._v("For links we use a "),e("a",{attrs:{href:""}},[t._v("CID")]),t._v(". A CID is an extension of "),e("code",[t._v("multihash")]),t._v(",\nin fact a "),e("code",[t._v("multihash")]),t._v(" is part of a "),e("code",[t._v("CID")]),t._v(". All we extend it with\nis a "),e("em",[t._v("codec")]),t._v(" that tells us what format the data is in (JSON, CBOR,\nBitcoin, Ethereum, etc). This way, we can actually link between\ndata in different formats and any link to data anyone ever gives\nus can be decoded so that it can become more than just a series\nof bytes.")]),t._v(" "),e("p",[t._v("CID is a "),e("a",{attrs:{href:""}},[t._v("standard")]),t._v(" that anyone can implement, even people that\nhave no other interest in IPLD beyond the need for hash links to\ndifferent data types can use it.")]),t._v(" "),e("p",[t._v("The IPLD Data Model is a bit more conceptual, as it is applied\nto formats that had never considered IPLD.")]),t._v(" "),e("p",[t._v("Every language has a library for JSON encoding and decoding. These\nlanguages all adapt the JSON data model (types) into whatever the\nbest fit for their language is. Our data model is very similar,\nbut we add a few more types.")]),t._v(" "),e("p",[t._v("First, we add a link type using CID as our link format. We also\nadd binary values, which are missing from JSON. We support nothing\nbeyond that other than the types JSON has already defined quite well.")]),t._v(" "),e("p",[t._v("We then apply this data model to more than just our own formats. We\nhave specifications and libraries for interpreting many formats into\nthis data model. For instance, Bitcoin blocks know nothing about IPLD\nsince they were designed long before IPLD existed. We have a decoder\nfor Bitcoin that presents the data found in a Bitcoin block as IPLD\nData Model.")]),t._v(" "),e("p",[t._v("This provides a consistent interpretation of all formats across all programming\nlanguages in IPLD terms. For instance, the links in Bitcoin blocks are\nonly to other Bitcoin blocks and do not use CID's internally, but when\nyou use an IPLD codec to read them the links will all be normalized\nto CID's that link to Bitcoin blocks.")]),t._v(" "),e("p",[t._v("This lets you build data structures that freely link between formats\nthat can be traversed though a normalized data model. Effectively,\nyou can write format agnostic tools for reading, distributing, and\npersisting all content addressed data.")]),t._v(" "),e("h2",{attrs:{id:"tutorials"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tutorials"}},[t._v("#")]),t._v(" Tutorials")]),t._v(" "),e("p",[t._v("We highly recommend you read the following tutorials\nbefore trying to use IPLD. These tutorials are language\nagnostic and include examples in JavaScript, Go and Rust.")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"./tutorials/thinking"}},[t._v("Thinking in data structures")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:""}},[t._v("Decentralizing data")])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("Introduction to IPLD Schemas")])])])])]),t._v(" "),e("h2",{attrs:{id:"getting-started"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getting-started"}},[t._v("#")]),t._v(" Getting Started")]),t._v(" "),e("p",[t._v("Using IPLD can vary from language to language.")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"./getting-started/js"}},[t._v("Getting started in JavaScript")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"./getting-started/js#storing-ipld-data-in-ipfs"}},[t._v("Persisting IPLD data in "),e("code",[t._v("js-ipfs")]),t._v(" and "),e("code",[t._v("js-ipfs-lite")])])])])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("Getting started in Go")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:""}},[t._v("Persisting IPLD data in "),e("code",[t._v("go-ipfs")])])])])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("Getting started in Rust")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:""}},[t._v("Persisting IPLD data in "),e("code",[t._v("rust-ipfs")])])])])])]),t._v(" "),e("h2",{attrs:{id:"advanced-topics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#advanced-topics"}},[t._v("#")]),t._v(" Advanced Topics")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:""}},[t._v("Complete IPLD Schema Documentation")])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("Comparing IPLD to traditional Databases")])]),t._v(" "),e("li",[e("a",{attrs:{href:""}},[t._v("How does IPFS use IPLD?")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);