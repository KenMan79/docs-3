(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{361:function(e,a,t){"use strict";t.r(a);var r=t(42),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"glossary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[e._v("#")]),e._v(" Glossary")]),e._v(" "),t("h2",{attrs:{id:"blocks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blocks"}},[e._v("#")]),e._v(" Blocks")]),e._v(" "),t("p",[e._v('The term "block" is used to refer to the pairing of a raw binary and a CID. In other words, it\'s\ndata that has not been decoded yet, or data that has just recently been encoded.')]),e._v(" "),t("p",[e._v("Most users don't work directly with blocks. Instead, block data is encoded/decoded into "),t("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(". It's only if your'e writing a database, or a filesystem, or a replicator that you will work directly\nwith blocks.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/block-layer/block.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full Block specification."),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"cid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cid"}},[e._v("#")]),e._v(" CID")]),e._v(" "),t("p",[e._v("CID is a Content IDentifier. It's self-describing data structure identifier. In other\nwords, it's a hash that says what kind of hash it is and how to decode it.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/block-layer/CID.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("IPLD CID Specification."),t("OutboundLink")],1),e._v(" The "),t("a",{attrs:{href:"https://github.com/multiformats/cid",target:"_blank",rel:"noopener noreferrer"}},[e._v("full format specification"),t("OutboundLink")],1),e._v(" is part of multi-formats.")]),e._v(" "),t("h2",{attrs:{id:"codecs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#codecs"}},[e._v("#")]),e._v(" Codecs")]),e._v(" "),t("p",[e._v('The term "codec" refers to a '),t("a",{attrs:{href:""}},[e._v("mutlicodec")]),e._v(" specific encoder/decoder.")]),e._v(" "),t("p",[e._v("A codec is responsible for encoding "),t("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(" to Binary and for\ndecoding Binary to "),t("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(".")]),e._v(" "),t("p",[e._v("Examples:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#DAG-CBOR"}},[e._v("dag-cbor")])]),e._v(" "),t("li",[t("a",{attrs:{href:"#DAG-JSON"}},[e._v("dag-json")])]),e._v(" "),t("li",[e._v("bitcoin")]),e._v(" "),t("li",[e._v("cbor")]),e._v(" "),t("li",[e._v("json")])]),e._v(" "),t("h3",{attrs:{id:"dag-cbor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-cbor"}},[e._v("#")]),e._v(" DAG-CBOR")]),e._v(" "),t("p",[e._v("IPLD Data Model implemented as a subset of CBOR with additional constraints\nfor hash consistent representations.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/block-layer/codecs/dag-cbor.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full DAG-CBOR specification."),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"dag-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-json"}},[e._v("#")]),e._v(" DAG-JSON")]),e._v(" "),t("p",[t("strong",[e._v("Not Recommended.")])]),e._v(" "),t("p",[e._v("IPLD Data Model implemented serialized to JSON.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/block-layer/codecs/dag-json.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full DAG-JSON specification."),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"data-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-model"}},[e._v("#")]),e._v(" Data Model")]),e._v(" "),t("p",[e._v("The Data Model describes common base types called "),t("em",[e._v("kinds")]),e._v(".")]),e._v(" "),t("p",[e._v("These "),t("em",[e._v("kinds")]),e._v(" allow IPLD to create data structures using simple types\naccessible across many programming languages and encoding formats.")]),e._v(" "),t("p",[e._v("Using the Data Model we can implement file systems, databases, and custom\napplication data structures in a format agnostic way and even link between\nthese structures and formats using commong toolchains.")]),e._v(" "),t("p",[e._v("All JSON types are Data Model kinds:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("map")])]),e._v(" "),t("li",[t("code",[e._v("list")])]),e._v(" "),t("li",[t("code",[e._v("boolean")]),e._v(" (true, false)")]),e._v(" "),t("li",[t("code",[e._v("null")])]),e._v(" "),t("li",[t("code",[e._v("string")]),e._v(" (utf8)")]),e._v(" "),t("li",[t("code",[e._v("numbers")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("int")])]),e._v(" "),t("li",[t("code",[e._v("float")])])])])]),e._v(" "),t("p",[e._v("There is a "),t("code",[e._v("bytes")]),e._v(" kind for raw binary data.")]),e._v(" "),t("p",[e._v("Finally, there is a "),t("code",[e._v("link")]),e._v(" kind represented by a "),t("a",{attrs:{href:"#CID"}},[e._v("CID")]),e._v(". You'll find\nCID type implementations for every programming language which are leveraged\nby all IPLD codecs in that language.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/data-model-layer/data-model.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full IPLD Data Model specification."),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"hamt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hamt"}},[e._v("#")]),e._v(" HAMT")]),e._v(" "),t("p",[e._v("HAMT stands for "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hash_array_mapped_trie",target:"_blank",rel:"noopener noreferrer"}},[e._v('"Hash Array Mapped Trie"'),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v('HAMT\'s in IPLD differ from typical in-memory implementation as we require the use of "buckets"\nto manage performance.')]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/data-structures/hashmap.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full IPLD HAMT specification."),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"graphsync"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#graphsync"}},[e._v("#")]),e._v(" Graphsync")]),e._v(" "),t("p",[e._v("Graphsync is a replication protocol for IPLD. It's used heavily by Filecoin and experimentally by\nIPFS.")]),e._v(" "),t("p",[e._v("Graphsync uses "),t("a",{attrs:{href:"#selectors"}},[e._v("IPLD Selectors")]),e._v(" to replicate sections of a larger IPLD graph.")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/block-layer/graphsync/graphsync.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full Graphsync specification."),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"selectors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selectors"}},[e._v("#")]),e._v(" Selectors")]),e._v(" "),t("p",[e._v("Selectors define a selection criteria for IPLD graph queries.")]),e._v(" "),t("p",[e._v("IPLD Selectors are a declarative format for specifying a walk over a "),t("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(' graph --\nwhat nodes to walk over (or not), recursively; and, some positions to "visit" (with a callback, typically, though library implementation details may vary).\nYou can think of Selectors as being roughly like "regexps for graphs".')]),e._v(" "),t("p",[e._v("Selectors are natively implemented in most IPLD libraries (for performance reasons),\nbut the format itself is standardized.\nThe format is described in IPLD (using "),t("RouterLink",{attrs:{to:"/schemas/"}},[e._v("IPLD Schemas")]),e._v("),\nso it's possible to serialize Selectors in any "),t("a",{attrs:{href:"#codecs"}},[e._v("Codec")]),e._v(" you want,\nand it's also possible to inspect (and transform!) Selector documents using standard "),t("a",{attrs:{href:"#data-model"}},[e._v("Data Model")]),e._v(" tools.")],1),e._v(" "),t("p",[t("a",{attrs:{href:"https://specs.ipld.io/selectors/selectors.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Full IPLD Selectors specification."),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=s.exports}}]);