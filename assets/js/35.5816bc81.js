(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{384:function(t,e,o){"use strict";o.r(e);var s=o(42),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"ipld-selectors"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ipld-selectors"}},[t._v("#")]),t._v(" IPLD Selectors")]),t._v(" "),o("p",[t._v("IPLD Selectors are a declarative format for specifying a walk over a "),o("RouterLink",{attrs:{to:"/data-model/"}},[t._v("Data Model")]),t._v(' graph --\nwhat nodes to walk over (or not), recursively; and, some positions to "visit" (with a callback, typically, though library implementation details may vary).\nYou can think of Selectors as being roughly like "regexps for graphs".')],1),t._v(" "),o("p",[t._v("Selectors are natively implemented in most IPLD libraries (for performance reasons),\nbut the format itself is standardized.\nThe format is described in IPLD (using "),o("RouterLink",{attrs:{to:"/schemas/"}},[t._v("IPLD Schemas")]),t._v("),\nso it's possible to serialize Selectors in any "),o("RouterLink",{attrs:{to:"/codecs/"}},[t._v("Codec")]),t._v(" you want,\nand it's also possible to inspect (and transform!) Selector documents using standard "),o("RouterLink",{attrs:{to:"/data-model/"}},[t._v("Data Model")]),t._v(" tools.")],1),t._v(" "),o("p",[t._v("// TODO link to specs repo content")])])}),[],!1,null,null,null);e.default=a.exports}}]);