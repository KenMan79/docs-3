(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{361:function(a,e,t){"use strict";t.r(e);var s=t(42),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"glossary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glossary"}},[a._v("#")]),a._v(" Glossary")]),a._v(" "),t("h2",{attrs:{id:"blocks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blocks"}},[a._v("#")]),a._v(" Blocks")]),a._v(" "),t("p",[a._v('The term "block" is used to refer to the pairing of a raw binary and a CID. In other words, it\'s\ndata that has not been decoded yet, or data that has just recently been encoded.')]),a._v(" "),t("p",[a._v("Most users don't work directly with blocks. Instead, block data is encoded/decoded into "),t("a",{attrs:{href:"#data-model"}},[a._v("Data Model")]),a._v(". It's only if your'e writing a database, or a filesystem, or a replicator that you will work directly\nwith blocks.")]),a._v(" "),t("h2",{attrs:{id:"cid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cid"}},[a._v("#")]),a._v(" CID")]),a._v(" "),t("p",[a._v("CID is a Content IDentifier. It's self-describing data structure identifier. In other\nwords, it's a hash that says what kind of hash it is and how to decode it.")]),a._v(" "),t("p",[a._v("The "),t("a",{attrs:{href:"https://github.com/multiformats/cid",target:"_blank",rel:"noopener noreferrer"}},[a._v("full specification"),t("OutboundLink")],1),a._v(" is part of multi-formats.")]),a._v(" "),t("h2",{attrs:{id:"codecs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#codecs"}},[a._v("#")]),a._v(" Codecs")]),a._v(" "),t("p",[a._v('The term "codec" refers to a '),t("a",{attrs:{href:""}},[a._v("mutlicodec")]),a._v(" specific encoder/decoder.")]),a._v(" "),t("p",[a._v("A codec is responsible for encoding "),t("a",{attrs:{href:"#data-model"}},[a._v("Data Model")]),a._v(" to Binary and for\ndecoding Binary to "),t("a",{attrs:{href:"#data-model"}},[a._v("Data Model")]),a._v(".")]),a._v(" "),t("p",[a._v("Examples:")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#DAG-CBOR"}},[a._v("dag-cbor")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#DAG-JSON"}},[a._v("dag-json")])]),a._v(" "),t("li",[t("a",{attrs:{href:"#bitcoin-codec"}},[a._v("bitcoin")])]),a._v(" "),t("li",[a._v("cbor")]),a._v(" "),t("li",[a._v("json")])]),a._v(" "),t("h3",{attrs:{id:"dag-cbor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-cbor"}},[a._v("#")]),a._v(" DAG-CBOR")]),a._v(" "),t("h3",{attrs:{id:"dag-json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dag-json"}},[a._v("#")]),a._v(" DAG-JSON")]),a._v(" "),t("h2",{attrs:{id:"data-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#data-model"}},[a._v("#")]),a._v(" Data Model")]),a._v(" "),t("p",[a._v("The Data Model describes common base types called "),t("em",[a._v("kinds")]),a._v(".")]),a._v(" "),t("p",[a._v("These "),t("em",[a._v("kinds")]),a._v(" allow IPLD to create data structures using simple types\naccessible across many programming languages and encoding formats.")]),a._v(" "),t("p",[a._v("Using the Data Model we can implement file systems, databases, and custom\napplication data structures in a format agnostic way and even link between\nthese structures and formats using commong toolchains.")]),a._v(" "),t("p",[a._v("All JSON types are Data Model kinds:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("map")])]),a._v(" "),t("li",[t("code",[a._v("list")])]),a._v(" "),t("li",[t("code",[a._v("boolean")]),a._v(" (true, false)")]),a._v(" "),t("li",[t("code",[a._v("null")])]),a._v(" "),t("li",[t("code",[a._v("string")]),a._v(" (utf8)")]),a._v(" "),t("li",[t("code",[a._v("numbers")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("int")])]),a._v(" "),t("li",[t("code",[a._v("float")])])])])]),a._v(" "),t("p",[a._v("There is a "),t("code",[a._v("bytes")]),a._v(" kind for raw binary data.")]),a._v(" "),t("p",[a._v("Finally, there is a "),t("code",[a._v("link")]),a._v(" kind represented by a "),t("a",{attrs:{href:"#CID"}},[a._v("CID")]),a._v(". You'll find\nCID type implementations for every programming language which are leveraged\nby all IPLD codecs in that language.")])])}),[],!1,null,null,null);e.default=r.exports}}]);